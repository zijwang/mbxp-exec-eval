{"task_id":"MBPP\/1","prompt":"\n\ndef min_cost(cost, m, n):\n\t\"\"\"\n\tWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\t>>> min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n\t8\n\t>>> min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n\t12\n\t>>> min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n\t16\n\t\"\"\"\n","canonical_solution":"\tR = 3\n\tC = 3\n\t \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]","entry_point":"min_cost","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\n    assert candidate([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\n    assert candidate([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16\n\n","completion":"\tR = 3\n\tC = 3\n\t \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]","language":"python"}
{"task_id":"MBPP\/2","prompt":"\n\ndef similar_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to find the similar elements from the given two tuple lists.\n  >>> similar_elements((3, 4, 5, 6),(5, 7, 4, 10))\n  (4, 5)\n  >>> similar_elements((1, 2, 3, 4),(5, 4, 3, 7))\n  (3, 4)\n  >>> similar_elements((11, 12, 14, 13),(17, 15, 14, 13))\n  (13, 14)\n  \"\"\"\n","canonical_solution":"  \n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ","entry_point":"similar_elements","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n    assert candidate((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\n    assert candidate((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n\n","completion":"  \n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ","language":"python"}
{"task_id":"MBPP\/3","prompt":"\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    >>> is_not_prime(2)\n    False\n    >>> is_not_prime(10)\n    True\n    >>> is_not_prime(35)\n    True\n    \"\"\"\n","canonical_solution":"    import math\n    \n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result","entry_point":"is_not_prime","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n\n","completion":"    import math\n    \n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result","language":"python"}
{"task_id":"MBPP\/4","prompt":"\n\ndef heap_queue_largest(nums,n):\n  \"\"\"\n  Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)\n  [85, 75, 65]\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)\n  [85, 75]\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)\n  [85, 75, 65, 58, 35]\n  \"\"\"\n","canonical_solution":"  import heapq as hq\n  \n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums","entry_point":"heap_queue_largest","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n\n","completion":"  import heapq as hq\n  \n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums","language":"python"}
{"task_id":"MBPP\/5","prompt":"\n\ndef count_ways(n):\n\t\"\"\"\n\tWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\t>>> count_ways(2)\n\t3\n\t>>> count_ways(8)\n\t153\n\t>>> count_ways(12)\n\t2131\n\t\"\"\"\n","canonical_solution":"\t \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n] ","entry_point":"count_ways","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 3\n    assert candidate(8) == 153\n    assert candidate(12) == 2131\n\n","completion":"\t \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n] ","language":"python"}
{"task_id":"MBPP\/6","prompt":"\n\ndef differ_At_One_Bit_Pos(a,b):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    >>> differ_At_One_Bit_Pos(13,9)\n    True\n    >>> differ_At_One_Bit_Pos(15,8)\n    False\n    >>> differ_At_One_Bit_Pos(2,4)\n    False\n    \"\"\"\n","canonical_solution":"    def is_Power_Of_Two (x): \n        return x and (not(x & (x - 1))) \n     \n    return is_Power_Of_Two(a ^ b)","entry_point":"differ_At_One_Bit_Pos","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(13,9) == True\n    assert candidate(15,8) == False\n    assert candidate(2,4) == False\n\n","completion":"    def is_Power_Of_Two (x): \n        return x and (not(x & (x - 1))) \n     \n    return is_Power_Of_Two(a ^ b)","language":"python"}
{"task_id":"MBPP\/7","prompt":"\n\ndef find_char_long(text):\n  \"\"\"\n  Write a function to find all words which are at least 4 characters long in a string by using regex.\n  >>> find_char_long('Please move back to stream')\n  ['Please', 'move', 'back', 'stream']\n  >>> find_char_long('Jing Eco and Tech')\n  ['Jing', 'Tech']\n  >>> find_char_long('Jhingai wulu road Zone 3')\n  ['Jhingai', 'wulu', 'road', 'Zone']\n  \"\"\"\n","canonical_solution":"  import re\n  \n  return (re.findall(r\"\\b\\w{4,}\\b\", text))","entry_point":"find_char_long","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n    assert candidate('Jing Eco and Tech') == ['Jing', 'Tech']\n    assert candidate('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']\n\n","completion":"  import re\n  \n  return (re.findall(r\"\\b\\w{4,}\\b\", text))","language":"python"}
{"task_id":"MBPP\/8","prompt":"\n\ndef square_nums(nums):\n \"\"\"\n Write a function to find squares of individual elements in a list using lambda function.\n >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n >>> square_nums([10,20,30])\n ([100,400,900])\n >>> square_nums([12,15])\n ([144,225])\n \"\"\"\n","canonical_solution":" \n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums","entry_point":"square_nums","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n\n","completion":" \n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums","language":"python"}
{"task_id":"MBPP\/9","prompt":"\n\ndef find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"ab\")\n    2\n    >>> find_Rotations(\"abc\")\n    3\n    \"\"\"\n","canonical_solution":"     \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ","entry_point":"find_Rotations","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n\n","completion":"     \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ","language":"python"}
{"task_id":"MBPP\/10","prompt":"\n\ndef small_nnum(list1,n):\n  \"\"\"\n  Write a function to get the n smallest items from a dataset.\n  >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n  [10,20]\n  >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)\n  [10,20,20,40,50]\n  >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)\n  [10,20,20]\n  \"\"\"\n","canonical_solution":"  import heapq\n  \n  smallest=heapq.nsmallest(n,list1)\n  return smallest","entry_point":"small_nnum","test":"\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]\n\n","completion":"  import heapq\n  \n  smallest=heapq.nsmallest(n,list1)\n  return smallest","language":"python"}
