{"task_id": "MBJP/1", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MinCost {\n    /**\n     * * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n     *\n     * > minCost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n     * 8\n     * > minCost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n     * 12\n     * > minCost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n     * 16\n     */\n    public static int minCost(List<List<Integer>> cost, int m, int n) {\n", "entry_point": "minCost", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<List<Integer>> arg00 = Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 8, 2), Arrays.asList(1, 5, 3));\n        int arg01 = 2;\n        int arg02 = 2;\n        int x0 = MinCost.minCost(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 8, 2), Arrays.asList(1, 5, 3)), 2, 2);\n        int v0 = 8;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<List<Integer>> arg10 = Arrays.asList(Arrays.asList(2, 3, 4), Arrays.asList(5, 9, 3), Arrays.asList(2, 6, 4));\n        int arg11 = 2;\n        int arg12 = 2;\n        int x1 = MinCost.minCost(Arrays.asList(Arrays.asList(2, 3, 4), Arrays.asList(5, 9, 3), Arrays.asList(2, 6, 4)), 2, 2);\n        int v1 = 12;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<List<Integer>> arg20 = Arrays.asList(Arrays.asList(3, 4, 5), Arrays.asList(6, 10, 4), Arrays.asList(3, 7, 5));\n        int arg21 = 2;\n        int arg22 = 2;\n        int x2 = MinCost.minCost(Arrays.asList(Arrays.asList(3, 4, 5), Arrays.asList(6, 10, 4), Arrays.asList(3, 7, 5)), 2, 2);\n        int v2 = 16;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "language": "java"}
{"task_id": "MBJP/2", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SimilarElements {\n    /**\n     * * Write a function to find the similar elements from the given two tuple lists.\n     *\n     * > similarElements([3, 4, 5, 6], [5, 7, 4, 10])\n     * [4, 5]\n     * > similarElements([1, 2, 3, 4], [5, 4, 3, 7])\n     * [3, 4]\n     * > similarElements([11, 12, 14, 13], [17, 15, 14, 13])\n     * [13, 14]\n     */\n    public static List<Integer> similarElements(List<Integer> testTup1, List<Integer> testTup2) {\n", "entry_point": "similarElements", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(3, 4, 5, 6);\n        List<Integer> arg01 = Arrays.asList(5, 7, 4, 10);\n        List<Integer> x0 = SimilarElements.similarElements(Arrays.asList(3, 4, 5, 6), Arrays.asList(5, 7, 4, 10));\n        List<Integer> v0 = Arrays.asList(4, 5);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> arg11 = Arrays.asList(5, 4, 3, 7);\n        List<Integer> x1 = SimilarElements.similarElements(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 4, 3, 7));\n        List<Integer> v1 = Arrays.asList(3, 4);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(11, 12, 14, 13);\n        List<Integer> arg21 = Arrays.asList(17, 15, 14, 13);\n        List<Integer> x2 = SimilarElements.similarElements(Arrays.asList(11, 12, 14, 13), Arrays.asList(17, 15, 14, 13));\n        List<Integer> v2 = Arrays.asList(13, 14);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to find the similar elements from the given two tuple lists.", "language": "java"}
{"task_id": "MBJP/3", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNotPrime {\n    /**\n     * * Write a Java function to identify non-prime numbers.\n     *\n     * > isNotPrime(2)\n     * false\n     * > isNotPrime(10)\n     * true\n     * > isNotPrime(35)\n     * true\n     */\n    public static Boolean isNotPrime(int n) {\n", "entry_point": "isNotPrime", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 2;\n        Boolean x0 = IsNotPrime.isNotPrime(2);\n        Boolean v0 = false;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 10;\n        Boolean x1 = IsNotPrime.isNotPrime(10);\n        Boolean v1 = true;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 35;\n        Boolean x2 = IsNotPrime.isNotPrime(35);\n        Boolean v2 = true;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a Java function to identify non-prime numbers.", "language": "java"}
{"task_id": "MBJP/4", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HeapQueueLargest {\n    /**\n     * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n     *\n     * > heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n     * [85, 75, 65]\n     * > heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)\n     * [85, 75]\n     * > heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n     * [85, 75, 65, 58, 35]\n     */\n    public static List<Integer> heapQueueLargest(List<Integer> nums, int n) {\n", "entry_point": "heapQueueLargest", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(25, 35, 22, 85, 14, 65, 75, 22, 58);\n        int arg01 = 3;\n        List<Integer> x0 = HeapQueueLargest.heapQueueLargest(Arrays.asList(25, 35, 22, 85, 14, 65, 75, 22, 58), 3);\n        List<Integer> v0 = Arrays.asList(85, 75, 65);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(25, 35, 22, 85, 14, 65, 75, 22, 58);\n        int arg11 = 2;\n        List<Integer> x1 = HeapQueueLargest.heapQueueLargest(Arrays.asList(25, 35, 22, 85, 14, 65, 75, 22, 58), 2);\n        List<Integer> v1 = Arrays.asList(85, 75);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(25, 35, 22, 85, 14, 65, 75, 22, 58);\n        int arg21 = 5;\n        List<Integer> x2 = HeapQueueLargest.heapQueueLargest(Arrays.asList(25, 35, 22, 85, 14, 65, 75, 22, 58), 5);\n        List<Integer> v2 = Arrays.asList(85, 75, 65, 58, 35);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "language": "java"}
{"task_id": "MBJP/5", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountWays {\n    /**\n     * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n     *\n     * > countWays(2)\n     * 3\n     * > countWays(8)\n     * 153\n     * > countWays(12)\n     * 2131\n     */\n    public static int countWays(int n) {\n", "entry_point": "countWays", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 2;\n        int x0 = CountWays.countWays(2);\n        int v0 = 3;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 8;\n        int x1 = CountWays.countWays(8);\n        int v1 = 153;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 12;\n        int x2 = CountWays.countWays(12);\n        int v2 = 2131;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "language": "java"}
{"task_id": "MBJP/6", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DifferAtOneBitPos {\n    /**\n     * * Write a Java function to check whether the two numbers differ at one bit position only or not.\n     *\n     * > differAtOneBitPos(13, 9)\n     * true\n     * > differAtOneBitPos(15, 8)\n     * false\n     * > differAtOneBitPos(2, 4)\n     * false\n     */\n    public static Boolean differAtOneBitPos(int a, int b) {\n", "entry_point": "differAtOneBitPos", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        int arg00 = 13;\n        int arg01 = 9;\n        Boolean x0 = DifferAtOneBitPos.differAtOneBitPos(13, 9);\n        Boolean v0 = true;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        int arg10 = 15;\n        int arg11 = 8;\n        Boolean x1 = DifferAtOneBitPos.differAtOneBitPos(15, 8);\n        Boolean v1 = false;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        int arg20 = 2;\n        int arg21 = 4;\n        Boolean x2 = DifferAtOneBitPos.differAtOneBitPos(2, 4);\n        Boolean v2 = false;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a Java function to check whether the two numbers differ at one bit position only or not.", "language": "java"}
{"task_id": "MBJP/7", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindCharLong {\n    /**\n     * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n     *\n     * > findCharLong(\"Please move back to stream\")\n     * [\"Please\", \"move\", \"back\", \"stream\"]\n     * > findCharLong(\"Jing Eco and Tech\")\n     * [\"Jing\", \"Tech\"]\n     * > findCharLong(\"Jhingai wulu road Zone 3\")\n     * [\"Jhingai\", \"wulu\", \"road\", \"Zone\"]\n     */\n    public static List<String> findCharLong(String text) {\n", "entry_point": "findCharLong", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"Please move back to stream\";\n        List<String> x0 = FindCharLong.findCharLong(\"Please move back to stream\");\n        List<String> v0 = Arrays.asList(\"Please\", \"move\", \"back\", \"stream\");\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"Jing Eco and Tech\";\n        List<String> x1 = FindCharLong.findCharLong(\"Jing Eco and Tech\");\n        List<String> v1 = Arrays.asList(\"Jing\", \"Tech\");\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"Jhingai wulu road Zone 3\";\n        List<String> x2 = FindCharLong.findCharLong(\"Jhingai wulu road Zone 3\");\n        List<String> v2 = Arrays.asList(\"Jhingai\", \"wulu\", \"road\", \"Zone\");\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "language": "java"}
{"task_id": "MBJP/8", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SquareNums {\n    /**\n     * * Write a function to find squares of individual elements in a list using lambda function.\n     *\n     * > squareNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n     * > squareNums([10, 20, 30])\n     * [100, 400, 900]\n     * > squareNums([12, 15])\n     * [144, 225]\n     */\n    public static List<Integer> squareNums(List<Integer> nums) {\n", "entry_point": "squareNums", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> x0 = SquareNums.squareNums(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        List<Integer> v0 = Arrays.asList(1, 4, 9, 16, 25, 36, 49, 64, 81, 100);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(10, 20, 30);\n        List<Integer> x1 = SquareNums.squareNums(Arrays.asList(10, 20, 30));\n        List<Integer> v1 = Arrays.asList(100, 400, 900);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(12, 15);\n        List<Integer> x2 = SquareNums.squareNums(Arrays.asList(12, 15));\n        List<Integer> v2 = Arrays.asList(144, 225);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to find squares of individual elements in a list using lambda function.", "language": "java"}
{"task_id": "MBJP/9", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindRotations {\n    /**\n     * * Write a Java function to find the minimum number of rotations required to get the same string.\n     *\n     * > findRotations(\"aaaa\")\n     * 1\n     * > findRotations(\"ab\")\n     * 2\n     * > findRotations(\"abc\")\n     * 3\n     */\n    public static int findRotations(String str) {\n", "entry_point": "findRotations", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        String arg00 = \"aaaa\";\n        int x0 = FindRotations.findRotations(\"aaaa\");\n        int v0 = 1;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        String arg10 = \"ab\";\n        int x1 = FindRotations.findRotations(\"ab\");\n        int v1 = 2;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        String arg20 = \"abc\";\n        int x2 = FindRotations.findRotations(\"abc\");\n        int v2 = 3;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a Java function to find the minimum number of rotations required to get the same string.", "language": "java"}
{"task_id": "MBJP/10", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallNnum {\n    /**\n     * * Write a function to get the n smallest items from a dataset.\n     *\n     * > smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n     * [10, 20]\n     * > smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n     * [10, 20, 20, 40, 50]\n     * > smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n     * [10, 20, 20]\n     */\n    public static List<Integer> smallNnum(List<Integer> list1, int n) {\n", "entry_point": "smallNnum", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100);\n        int arg01 = 2;\n        List<Integer> x0 = SmallNnum.smallNnum(Arrays.asList(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 2);\n        List<Integer> v0 = Arrays.asList(10, 20);\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100);\n        int arg11 = 5;\n        List<Integer> x1 = SmallNnum.smallNnum(Arrays.asList(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 5);\n        List<Integer> v1 = Arrays.asList(10, 20, 20, 40, 50);\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100);\n        int arg21 = 3;\n        List<Integer> x2 = SmallNnum.smallNnum(Arrays.asList(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100), 3);\n        List<Integer> v2 = Arrays.asList(10, 20, 20);\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to get the n smallest items from a dataset.", "language": "java"}
